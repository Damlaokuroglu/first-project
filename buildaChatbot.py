# OpenAI'Ä±n GPT-3.5-turbo modelini kullanarak sohbet botu oluÅŸturur.

# Streamlit ve Openai kÃ¼tÃ¼phaneleri iÃ§e aktarÄ±lÄ±yor.

import streamlit as st
from openai import OpenAI

# Openai api key'i girdik.
openai_api_key = "sk-proj-CjCrQtfnzXk6DJdWlB6lT3BlbkFJ5g9P1a0uUZQEb284IFnB"

# Streamlit iÃ§inde yan panel oluÅŸturur.

with st.sidebar:
    # openai_api_key = st.text_input("OpenAI API Key", key="chatbot_api_key", type="password")
    "[Get an OpenAI API key](https://platform.openai.com/account/api-keys)"
    # UygulamanÄ±n kaynak kodunu sunar.
    "[View the source code](https://github.com/streamlit/llm-examples/blob/main/Chatbot.py)"
    # KullanÄ±cÄ±ya uygulamayÄ± GitHub Codespaces Ã¼zerinde aÃ§mak iÃ§in baÄŸlantÄ±yÄ± verir.
    "[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/streamlit/llm-examples?quickstart=1)"

# UygulamanÄ±n baÅŸlÄ±ÄŸÄ±nÄ± belirler.

st.title("ğŸ’¬ Chatbot")

# st.session_state oturum durumunu kontrol edip veri depolanmasÄ±nÄ± saÄŸlar. st.session_state iÃ§inde messages anahtarÄ± yoksa true dÃ¶ner ve assistant rolÃ¼nde varsayÄ±lan bir mesaj ile uygulama baÅŸlatÄ±lÄ±r.

if "messages" not in st.session_state:
    st.session_state["messages"] = [{"role": "assistant", "content": "How can I help you?"}]

# Bu kod oturum durumundaki tÃ¼m mesajlarÄ± ekranda gÃ¶rÃ¼ntÃ¼ler. Ä°lk satÄ±r tÃ¼m mesajlarÄ± dÃ¶ngÃ¼ yapar, ikinci satÄ±r tÃ¼m mesajlarÄ± rolÃ¼ne gÃ¶re sohbet balonu oluÅŸturarak ekranda mesaj iÃ§eriklerini gÃ¶sterir. st.session_state.messages oturum durumundaki Ã¶nceki tÃ¼m mesajlarÄ±n rolÃ¼nÃ¼ ve iÃ§eriÄŸini dictionary olarak saklar. st.chat_message(role) streamlit'in sohbet mesajlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in kullandÄ±ÄŸÄ± bir fonksiyondur. msg["role"] dÃ¶ngÃ¼deki mevcut mesajÄ±n rolÃ¼nÃ¼ alÄ±r. .write(content) mesaj iÃ§eriÄŸini ekranda gÃ¶rÃ¼ntÃ¼ler. msg["content"] dÃ¶ngÃ¼deki mevcut mesajÄ±n iÃ§eriÄŸini alÄ±r.

for msg in st.session_state.messages:
    st.chat_message(msg["role"]).write(msg["content"])

# prompt kullanÄ±cÄ±dan alÄ±nan metni temsil eden bir deÄŸiÅŸkendir. st.chat_input() kullanÄ±cÄ±dan metin giriÅŸi almayÄ± saÄŸlar. KullanÄ±cÄ±nÄ±n yazdÄ±ÄŸÄ± deÄŸer prompt deÄŸiÅŸkenine atanÄ±r ve eÄŸer bu deÄŸiÅŸken boÅŸ deÄŸilse kullanÄ±cÄ± bir ÅŸeyler yazdÄ±ysa if bloÄŸu Ã§alÄ±ÅŸÄ±r. Walrus operatÃ¶rÃ¼ := bir ifadeyi deÄŸerlendirirken aynÄ± zamanda bir deÄŸiÅŸkene atama yapmayÄ± saÄŸlar. prompt deÄŸiÅŸkeninin sadece if bloÄŸunda kullanÄ±lmasÄ±nÄ± da saÄŸlar. 

if prompt := st.chat_input():

    # if not openai_api_key:
    #     st.info("Please add your OpenAI API key to continue.")
    #     st.stop()

    # Bu kod OpenAI api'sine eriÅŸim saÄŸlamak iÃ§in gerekli istemciyi oluÅŸturur. Bu nesne api ile etkileÅŸime geÃ§mek iÃ§in kullanÄ±lÄ±r. OpenAI, openai api'sine eriÅŸmek iÃ§in kullanÄ±lan bir kÃ¼tÃ¼phanedir. OpenAI bir sÄ±nÄ±fsa bu sÄ±nÄ±fÄ±n Ã¶rneÄŸini(client) oluÅŸturur, bir fonksiyonsa bunu kullanarak API'ye eriÅŸim saÄŸlar. api_key=openai_api_key kullanÄ±lan API anahtarÄ±nÄ± belirtir. openai_api_key API anahtarÄ±nÄ±n saÄŸlandÄ±ÄŸÄ± deÄŸiÅŸkendir. client deÄŸiÅŸkeni OpenAI api'sine eriÅŸmek ve api Ã§aÄŸrÄ±larÄ± yapmak iÃ§in kullanÄ±lan istemci nesnesini ifade eder. Bu istemci OpenAI api'sine istekler gÃ¶ndermek iÃ§in kullanÄ±lacak. api_key parametresi OpenAI api'sinin kimlik doÄŸrulamasÄ± iÃ§in kullanÄ±lÄ±r. 

    client = OpenAI(api_key=openai_api_key)

    # Ä°lk satÄ±r kullanÄ±cÄ±nÄ±n sohbet penceresine yazdÄ±ÄŸÄ± mesajÄ± listenin sonuna ekler. .append() metodu listeye yeni bir Ã¶ÄŸe ekler. ikinci satÄ±r kullanÄ±cÄ±nÄ±n girdiÄŸi mesajÄ± sohbet penceresinde gÃ¶sterir.  

    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)

    # .chat OpenAI api'sindeki sohbet iÅŸlevlerine eriÅŸim saÄŸlar. .completions api'nin tamamlama Ã¶zelliÄŸini temsil eder, genelde modelin bir sohbete yanÄ±t oluÅŸturmasÄ± iÃ§in kullanÄ±lÄ±r. .create yeni bir tamamlanma oluÅŸturur, OpenAI modelinin kullanÄ±larak yanÄ±t Ã¼retilmesini saÄŸlar. messages api Ã§aÄŸrÄ±sÄ±na gÃ¶nderilen mesajlar dizisini belirtir. st.session_state.messages listesi modelin yanÄ±t oluÅŸtururken tÃ¼m mesaj geÃ§miÅŸini dikkate almasÄ±nÄ± saÄŸlar. Bu yanÄ±tÄ± response deÄŸiÅŸkeninde saklar.

    response = client.chat.completions.create(model="gpt-3.5-turbo", messages=st.session_state.messages)

    # OpenAI api'sinden gelen yanÄ±tÄ± sohbet penceresinde gÃ¶sterip sohbet geÃ§miÅŸine ekler. response.choices[0] birden fazla yanÄ±t seÃ§eneÄŸi varsa ilk yanÄ±tÄ± seÃ§er. 

    msg = response.choices[0].message.content
    st.session_state.messages.append({"role": "assistant", "content": msg})
    st.chat_message("assistant").write(msg)     # YanÄ±t sadece metin tÃ¼rÃ¼nde olur. 

# Streamlit'in etkileÅŸimli doÄŸasÄ± sayesinde kod tamamen Ã§alÄ±ÅŸtÄ±ktan sonra yeniden Ã§alÄ±ÅŸÄ±p kullanÄ±cÄ±dan soru alÄ±r. 